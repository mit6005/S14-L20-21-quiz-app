4 2
Java
Specifications
Testing
Concurrency
1 5 2
Which one of the following are allowed in an interface declaration? 
Method bodies 
Static method signatures 
Non-static method signatures 
Constructors  
Field declarations 
18 5 1
public class DemoSuper {
    static void mytest2(DemoSuper ds) { 
        System.out.println("arg DemoSuper"); 
    } 
    static void mytest2(DemoSub ds) { 
        System.out.println("arg DemoSub"); 
    }
    public static void main(String[] args) {
        DemoSuper supersuper = new DemoSuper(); 
        DemoSuper supersub = new DemoSub(); 
        DemoSub subsub = new DemoSub();
        supersuper.mytest2(supersuper);
        supersuper.mytest2(supersub);
        supersuper.mytest2(subsub);
    }
}
 
What will be printed out when this program is run?
arg DemoSuper arg DemoSuper arg DemoSuper
arg DemoSuper arg DemoSuper arg DemoSub
arg DemoSuper arg DemoSub   arg DemoSub
arg DemoSuub  arg DemoSub   arg DemoSub
Exception
11 5 1
/**
* Gets the i^th element.
*
* Given an index i, this method returns the element at that index.
*
* @param i index of element to return
* @throws IndexOutOfBoundsException if the index is larger than the
* length of the list minus 1.
*/
 
How can this specification be fixed?
Add a precondition: the index must be less than the size of the list.
Add a precondition: the index must be greater than or equal to 0.	
Add a param clause.
Add a precondition: the ImMuList must be nonempty.
The specification is fine; nothing needs to be added.
1 5 3
The relationship of equals and hashCode of two objects a and b in a class should be
a.hashCode() == b.hashCode() --> a == b
a == b --> a.hashCode() == b.hashCode() and a.hashCode() == b.hashCode() --> a == b
a.equals(b)--> a.hashCode() == b.hashCode()
a.hashCode() == b.hashCode() --> a.equals(b)
a.equals(b)--> a.hashCode() == b.hashCode() and a.hashCode() == b.hashCode() --> a.equals(b)
1 4 3
A programmer can reduce the time spent in debugging by 
Rapidly iterating through code-compile-run-debug cycle 
If the precondition is violated, returning null instead of throwing an exception 
Reducing the number of bugs discovered by reducing the number of times regression tests are run 
Inserting a lot of assertions to check pre and post conditions 
1 4 0
Which of the following best defines regression testing: 
Changes should be tested against all inputs that elicited bugs in earlier versions of the code. 
Every component in your code should have an associated set of tests that exercises all the corner cases in its specification. 
Tests should be written before you write the code as a way of checking your understanding of the specification. 
When a new test exposes a bug, you should run it on all previous versions of the code until you find the version where the bug was introduced. 
17 5 2
T0:         
X.acquire(); 
Y.acquire();
Y = X + Y 
Y.release(); 
X = 0
X.release(); 
  
T1: 
Y.acquire(); 
X.acquire(); 
Y = X + Y
X = 0
X.release(); 
Y.release()
 
What is the outcome of the about operations done by two threads
Allways correct, no problems
Allways deadlocks
Deadlock in some executions
Always have a rece condition
Race condition on some executions
1 5 1
A safety argument for concurrent objects should not include
safety by non sharing
safety by equality
safety by immutability
safety by using of existing threadsafe datatypes
safety by proper synchronization 

